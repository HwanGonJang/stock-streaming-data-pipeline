package api.hwangonjang.com.stockstreamingdatapipelineapi.domain.stock.service

import api.hwangonjang.com.stockstreamingdatapipelineapi.domain.stock.dto.TradeDto
import api.hwangonjang.com.stockstreamingdatapipelineapi.domain.stock.repository.TradeRepository
import org.springframework.stereotype.Service
import reactor.core.publisher.Flux
import java.time.*
import java.time.format.DateTimeFormatter

@Service
class StockStreamingService(
    private val tradeRepository: TradeRepository
) {
    fun streamRealTimeTradeData(
        symbol: String,
        intervalSeconds: Long = 1L,
        useKoreanTimeSimulation: Boolean = false,
        debugFixedDate: LocalDate? = null
    ): Flux<TradeDto> {
        return if (useKoreanTimeSimulation) {
            if (debugFixedDate != null) {
                streamKoreanTimeSimulatedDataWithFixedDate(symbol, intervalSeconds, debugFixedDate)
            } else {
                streamKoreanTimeSimulatedData(symbol, intervalSeconds)
            }
        } else {
            streamRealTimeData(symbol, intervalSeconds)
        }
    }

    private fun streamRealTimeData(symbol: String, intervalSeconds: Long): Flux<TradeDto> {
        return Flux.interval(Duration.ofSeconds(intervalSeconds))
            .flatMap {
                val fromTime = LocalDateTime.now().minusSeconds(intervalSeconds)
                tradeRepository.findBySymbolAndTradeTimestampGreaterThanEqual(symbol, fromTime)
                    .map { trade -> TradeDto.from(trade) }
                    .collectList()
                    .flatMapMany { trades ->
                        if (trades.isNotEmpty()) Flux.fromIterable(trades)
                        else Flux.empty()
                    }
            }
    }

    private fun streamKoreanTimeSimulatedData(symbol: String, intervalSeconds: Long): Flux<TradeDto> {
        return Flux.interval(Duration.ofSeconds(intervalSeconds))
            .filter { isKoreanMarketSimulationTime() }
            .flatMap {
                val now = LocalDateTime.now() // UTC Í∏∞Ï§Ä ÌòÑÏû¨ ÏãúÍ∞Ñ
                val simulatedUsTime = convertKoreanTimeToUsMarketTime(now)
                val fromTime = simulatedUsTime.minusSeconds(intervalSeconds)
                val toTime = simulatedUsTime

                tradeRepository.findBySymbolAndTradeTimestampBetween(symbol, fromTime, toTime)
                    .map { trade ->
                        TradeDto.from(trade).copy(
                            tradeTimestamp = convertToKoreanSimulationTime(trade.primaryKey.tradeTimestamp)
                        )
                    }
                    .collectList()
                    .flatMapMany { trades ->
                        if (trades.isNotEmpty()) Flux.fromIterable(trades)
                        else Flux.empty()
                    }
            }
    }

    private fun streamKoreanTimeSimulatedDataWithFixedDate(
        symbol: String,
        intervalSeconds: Long,
        fixedDate: LocalDate
    ): Flux<TradeDto> {
        return Flux.interval(Duration.ofSeconds(intervalSeconds))
            .filter { isKoreanMarketSimulationTime() }
            .flatMap {
                val now = LocalDateTime.now() // UTC Í∏∞Ï§Ä ÌòÑÏû¨ ÏãúÍ∞Ñ
                val simulatedUsTime = convertKoreanTimeToFixedUsMarketTime(now, fixedDate)
                val fromTime = simulatedUsTime.minusSeconds(intervalSeconds)
                val toTime = simulatedUsTime

                // ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏
                logTimeConversionDebug(now, simulatedUsTime, fixedDate)

                tradeRepository.findBySymbolAndTradeTimestampBetween(symbol, fromTime, toTime)
                    .map { trade ->
                        TradeDto.from(trade).copy(
                            tradeTimestamp = convertToKoreanSimulationTime(trade.primaryKey.tradeTimestamp)
                        )
                    }
                    .collectList()
                    .flatMapMany { trades ->
                        if (trades.isNotEmpty()) {
                            println("üîç [DEBUG] Ï°∞ÌöåÎêú Îç∞Ïù¥ÌÑ∞: ${trades.size}Í±¥, ÏãúÍ∞ÑÎ≤îÏúÑ: $fromTime ~ $toTime")
                            Flux.fromIterable(trades)
                        } else {
                            println("‚ö†Ô∏è [DEBUG] Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå, ÏãúÍ∞ÑÎ≤îÏúÑ: $fromTime ~ $toTime")
                            Flux.empty()
                        }
                    }
            }
    }

    /**
     * ÌòÑÏû¨ UTC ÏãúÍ∞ÑÏùÑ ÌïúÍµ≠ ÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÌôò ÌõÑ ÎØ∏Íµ≠ Ïû•ÏãúÍ∞ÑÏúºÎ°ú Îß§Ìïë
     * Î™©Ìëú: Î™©ÏöîÏùº ÎØ∏Íµ≠ Ïû• 10:00 => Í∏àÏöîÏùº ÌïúÍµ≠ 10:00Ïóê Ï°∞Ìöå
     */
    private fun convertKoreanTimeToUsMarketTime(currentUtcTime: LocalDateTime): LocalDateTime {
        // 1Îã®Í≥Ñ: UTCÎ•º ÌïúÍµ≠ ÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÌôò
        val koreanTime = currentUtcTime.plusHours(9) // UTC + 9ÏãúÍ∞Ñ = ÌïúÍµ≠ ÏãúÍ∞Ñ

        // 2Îã®Í≥Ñ: ÌïúÍµ≠ ÏãúÍ∞ÑÏùÑ ÎØ∏Íµ≠ Ïû•ÏãúÍ∞ÑÏúºÎ°ú Îß§Ìïë
        val koreanStartTime = LocalTime.of(4, 0)   // ÌïúÍµ≠ Ïò§Ï†Ñ 4Ïãú (ÌîÑÎ¶¨ÎßàÏºì ÏãúÏûë)
        val koreanEndTime = LocalTime.of(20, 0)    // ÌïúÍµ≠ Ïò§ÌõÑ 8Ïãú (Ïï†ÌîÑÌÑ∞ÎßàÏºì Ï¢ÖÎ£å)
        val usStartTime = LocalTime.of(4, 0)       // ÎØ∏Íµ≠ Ïò§Ï†Ñ 4Ïãú (ÌîÑÎ¶¨ÎßàÏºì)
        val usEndTime = LocalTime.of(20, 0)        // ÎØ∏Íµ≠ Ïò§ÌõÑ 8Ïãú (Ïï†ÌîÑÌÑ∞ÎßàÏºì)

        val koreanCurrentTime = koreanTime.toLocalTime()

        // 3Îã®Í≥Ñ: 1:1 ÏãúÍ∞Ñ Îß§Ìïë
        val mappedUsTime = when {
            koreanCurrentTime.isBefore(koreanStartTime) -> {
                usEndTime
            }
            koreanCurrentTime.isAfter(koreanEndTime) -> {
                usStartTime
            }
            else -> {
                koreanCurrentTime
            }
        }

        // 4Îã®Í≥Ñ: Ï†ÑÎÇ† ÎØ∏Íµ≠ Í±∞ÎûòÏùº Í≥ÑÏÇ∞
        val targetDate = getLastUsMarketDay(koreanTime.toLocalDate())

        // 5Îã®Í≥Ñ: ÎØ∏Íµ≠ ÏãúÍ∞ÑÏùÑ UTCÎ°ú Î≥ÄÌôò (EDT: UTC-4, EST: UTC-5)
        val usLocalDateTime = LocalDateTime.of(targetDate, mappedUsTime)
        val usUtcTime = convertUsTimeToUtc(usLocalDateTime, targetDate)

        return usUtcTime
    }

    /**
     * ÎØ∏Íµ≠ EDT/EST ÏãúÍ∞ÑÏùÑ UTCÎ°ú Î≥ÄÌôò
     */
    private fun convertUsTimeToUtc(usLocalTime: LocalDateTime, date: LocalDate): LocalDateTime {
        val usEasternZone = ZoneId.of("America/New_York")

        // ÎØ∏Íµ≠ ÎèôÎ∂Ä ÏãúÍ∞ÑÏùÑ ZonedDateTimeÏúºÎ°ú Î≥ÄÌôò ÌõÑ UTCÎ°ú Î≥ÄÌôò
        val usZonedTime = usLocalTime.atZone(usEasternZone)
        val utcZonedTime = usZonedTime.withZoneSameInstant(ZoneOffset.UTC)

        return utcZonedTime.toLocalDateTime()
    }

    /**
     * ÎØ∏Íµ≠ UTC ÏãúÍ∞ÑÏùÑ ÌïúÍµ≠ ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÌôò
     */
    private fun convertToKoreanSimulationTime(usUtcTime: LocalDateTime): LocalDateTime {
        // 1Îã®Í≥Ñ: UTC ÎØ∏Íµ≠ ÏãúÍ∞ÑÏùÑ ÎØ∏Íµ≠ Î°úÏª¨ ÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÌôò
        val usLocalTime = convertUtcToUsTime(usUtcTime)

        // 2Îã®Í≥Ñ: ÎØ∏Íµ≠ Î°úÏª¨ ÏãúÍ∞ÑÏùÑ ÌïúÍµ≠ ÏãúÍ∞ÑÏúºÎ°ú 1:1 Îß§Ìïë
        val usLocalTimeOnly = usLocalTime.toLocalTime()

        // 3Îã®Í≥Ñ: ÌòÑÏû¨ ÌïúÍµ≠ ÎÇ†ÏßúÎ°ú ÏÑ§Ï†ï
        val koreanToday = LocalDateTime.now().plusHours(9).toLocalDate() // UTC + 9ÏãúÍ∞Ñ = ÌïúÍµ≠ ÎÇ†Ïßú

        return LocalDateTime.of(koreanToday, usLocalTimeOnly)
    }

    /**
     * UTC ÏãúÍ∞ÑÏùÑ ÎØ∏Íµ≠ Î°úÏª¨ ÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÌôò
     */
    private fun convertUtcToUsTime(utcTime: LocalDateTime): LocalDateTime {
        val usEasternZone = ZoneId.of("America/New_York")

        val utcZonedTime = utcTime.atZone(ZoneOffset.UTC)
        val usZonedTime = utcZonedTime.withZoneSameInstant(usEasternZone)

        return usZonedTime.toLocalDateTime()
    }

    /**
     * ÌòÑÏû¨ ÏãúÍ∞ÑÏù¥ ÌïúÍµ≠ Í∏∞Ï§Ä ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏãúÍ∞ÑÏù∏ÏßÄ ÌôïÏù∏
     */
    private fun isKoreanMarketSimulationTime(): Boolean {
        return true // 24ÏãúÍ∞Ñ Ïä§Ìä∏Î¶¨Î∞ç Í∞ÄÎä•

        // ÌäπÏ†ï ÏãúÍ∞ÑÎåÄÎßå ÏõêÌïúÎã§Î©¥:
        // val koreanTime = LocalDateTime.now().plusHours(9) // UTC + 9ÏãúÍ∞Ñ = ÌïúÍµ≠ ÏãúÍ∞Ñ
        // val currentTime = koreanTime.toLocalTime()
        // val startTime = LocalTime.of(4, 0)   // Ïò§Ï†Ñ 4Ïãú
        // val endTime = LocalTime.of(20, 0)    // Ïò§ÌõÑ 8Ïãú
        // return !currentTime.isBefore(startTime) && !currentTime.isAfter(endTime)
    }

    /**
     * Í∞ÄÏû• ÏµúÍ∑º ÎØ∏Íµ≠ ÏãúÏû• Í±∞ÎûòÏùº Î∞òÌôò (Ï£ºÎßê Ï†úÏô∏)
     */
    private fun getLastUsMarketDay(koreanDate: LocalDate): LocalDate {
        var targetDate = koreanDate.minusDays(1) // Ï†ÑÎÇ†Î∂ÄÌÑ∞ ÏãúÏûë

        // Ï£ºÎßêÏù¥Î©¥ Í∞ÄÏû• ÏµúÍ∑º ÌèâÏùºÎ°ú Ï°∞Ï†ï
        while (targetDate.dayOfWeek == DayOfWeek.SATURDAY || targetDate.dayOfWeek == DayOfWeek.SUNDAY) {
            targetDate = targetDate.minusDays(1)
        }

        return targetDate
    }

    /**
     * Í≥†Ï†ï ÎÇ†Ïßú Í∏∞Ï§ÄÏúºÎ°ú ÌïúÍµ≠ ÏãúÍ∞ÑÏùÑ ÎØ∏Íµ≠ UTC ÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÌôò (ÎîîÎ≤ÑÍπÖÏö©)
     */
    private fun convertKoreanTimeToFixedUsMarketTime(
        currentUtcTime: LocalDateTime,
        fixedDate: LocalDate
    ): LocalDateTime {
        // 1Îã®Í≥Ñ: UTCÎ•º ÌïúÍµ≠ ÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÌôò
        val koreanTime = currentUtcTime.plusHours(9)
        val koreanCurrentTime = koreanTime.toLocalTime()

        // 2Îã®Í≥Ñ: ÌïúÍµ≠ ÏãúÍ∞ÑÏùÑ ÎØ∏Íµ≠ ÏãúÍ∞ÑÏúºÎ°ú 1:1 Îß§Ìïë
        val koreanStartTime = LocalTime.of(4, 0)
        val koreanEndTime = LocalTime.of(20, 0)
        val usStartTime = LocalTime.of(4, 0)
        val usEndTime = LocalTime.of(20, 0)

        val mappedUsTime = when {
            koreanCurrentTime.isBefore(koreanStartTime) -> usEndTime
            koreanCurrentTime.isAfter(koreanEndTime) -> usStartTime
            else -> koreanCurrentTime
        }

        // 3Îã®Í≥Ñ: Í≥†Ï†ï ÎÇ†ÏßúÏùò ÎØ∏Íµ≠ ÏãúÍ∞ÑÏùÑ UTCÎ°ú Î≥ÄÌôò
        val usLocalDateTime = LocalDateTime.of(fixedDate, mappedUsTime)
        val usUtcTime = convertUsTimeToUtc(usLocalDateTime, fixedDate)

        return usUtcTime
    }

    /**
     * ÎîîÎ≤ÑÍπÖÏö© ÏãúÍ∞Ñ Î≥ÄÌôò Ï†ïÎ≥¥ Ï∂úÎ†•
     */
    private fun logTimeConversionDebug(
        currentUtcTime: LocalDateTime,
        usUtcTime: LocalDateTime,
        fixedDate: LocalDate
    ) {
        val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
        val koreanTime = currentUtcTime.plusHours(9)
        val usLocalTime = convertUtcToUsTime(usUtcTime)

        println("üïê [DEBUG] Í≥†Ï†ïÎÇ†Ïßú: $fixedDate")
        println("üåç [DEBUG] ÌòÑÏû¨ UTC: ${currentUtcTime.format(formatter)}")
        println("üá∞üá∑ [DEBUG] ÌïúÍµ≠ÏãúÍ∞Ñ: ${koreanTime.format(formatter)}")
        println("üá∫üá∏ [DEBUG] ÎØ∏Íµ≠Î°úÏª¨: ${usLocalTime.format(formatter)}")
        println("üåç [DEBUG] ÎØ∏Íµ≠UTC: ${usUtcTime.format(formatter)}")
        println("üìä [DEBUG] Ï°∞ÌöåÎ≤îÏúÑ: ${usUtcTime.minusSeconds(1).format(formatter)} ~ ${usUtcTime.format(formatter)} (UTC)")
        println("----------------------------------------")
    }

    /**
     * ÎîîÎ≤ÑÍπÖÏö© ÏãúÍ∞Ñ Î≥ÄÌôò Ï†ïÎ≥¥ Ï∂úÎ†•
     */
    private fun logTimeConversion(currentUtcTime: LocalDateTime, usUtcTime: LocalDateTime) {
        val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
        val koreanTime = currentUtcTime.plusHours(9)
        val usLocalTime = convertUtcToUsTime(usUtcTime)

        println("üåç UTC: ${currentUtcTime.format(formatter)} -> üá∞üá∑ ÌïúÍµ≠: ${koreanTime.format(formatter)} -> üá∫üá∏ ÎØ∏Íµ≠UTC: ${usUtcTime.format(formatter)}")
    }

    fun getLatestTrades(symbol: String, limit: Int = 10): Flux<TradeDto> {
        return tradeRepository.findLatestTradesBySymbol(symbol, limit)
            .map { trade -> TradeDto.from(trade) }
    }
}