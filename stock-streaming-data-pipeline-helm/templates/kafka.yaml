apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: pipeline-namespace
spec:
  serviceName: "zookeeper"
  replicas: 1
  selector:
    matchLabels:
      k8s.service: zookeeper
  template:
    metadata:
      labels:
        k8s.service: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:6.2.0
          ports:
            - containerPort: 2181
          env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            - name: ZOOKEEPER_TICK_TIME
              value: "2000"
          livenessProbe:
            tcpSocket:
              port: 2181
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 2181
            initialDelaySeconds: 10
            periodSeconds: 5
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-service
  namespace: pipeline-namespace
spec:
  serviceName: "kafka-service"
  replicas: 1
  selector:
    matchLabels:
      k8s.service: kafka
  template:
    metadata:
      labels:
        k8s.service: kafka
    spec:
      securityContext:
        runAsUser: 0  
        fsGroup: 0
      containers:
        - name: kafka-service
          resources:
            limits:
              memory: 1Gi
              cpu: 1
          image: public.ecr.aws/d7v9d9b4/stock-streaming-data-pipeline/kafka:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 9092
            - containerPort: 29092
          env:
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kafka-service.pipeline-namespace.svc.cluster.local:9092"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
              value: "0"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_LOG_RETENTION_MS
              value: "3600000"
          livenessProbe:
            tcpSocket:
              port: 9092
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            tcpSocket:
              port: 9092
            initialDelaySeconds: 30
            periodSeconds: 10
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "chmod +x /kafka-setup-k8s.sh && /kafka-setup-k8s.sh"]
          volumeMounts:
            - name: kafka-volume
              mountPath: /var/lib/kafka
        - name: kafdrop
          image: obsidiandynamics/kafdrop:3.30.0
          ports:
            - containerPort: 9000
          env:
            - name: KAFKA_BROKERCONNECT
              value: "localhost:29092"
      hostname: kafka-service-0
  volumeClaimTemplates:
    - metadata:
        name: kafka-volume
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: standard
        resources:
          requests:
            storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: pipeline-namespace
spec:
  ports:
    - name: "2181"
      port: 2181
      targetPort: 2181
  selector:
    k8s.service: zookeeper
  clusterIP: None
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: pipeline-namespace
spec:
  ports:
    - name: "9092"
      port: 9092
      targetPort: 9092
    - name: "29092"
      port: 29092
      targetPort: 29092
  selector:
    k8s.service: kafka
  clusterIP: None
---
apiVersion: v1
kind: Service
metadata:
  name: kafkdrop-service
  namespace: pipeline-namespace
spec:
  ports:
    - protocol: TCP
      name: "9000"
      port: 9000          
      targetPort: 9000    
      nodePort: 30900
  selector:
    k8s.service: kafka
  type: LoadBalancer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kafka-service-ingress
  namespace: pipeline-namespace
spec:
  ingressClassName: nginx
  rules:
    - host: 'kafdrop.hwangonjang.com'
      http:
        paths:
          - backend:
              service:
                name: kafdrop-service
                port:
                  number: 9000
            path: /
            pathType: Prefix